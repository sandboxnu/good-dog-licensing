// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRISMA_URL")
}

enum Role {
  ONBOARDING
  MUSICIAN
  MEDIA_MAKER
  ADMIN
}

model User {
  userId             String              @id @default(uuid()) @map("id")
  email              String              @unique
  phoneNumber        String
  hashedPassword     String              @map("password")
  firstName          String
  lastName           String
  stageName          String?
  role               Role
  isSongWriter       Boolean             @default(false)
  isAscapAffiliated  Boolean             @default(false)
  isBmiAffiliated    Boolean             @default(false)
  musicianGroups     MusicianGroup[]
  passwordResetReq   PasswordResetReq?
  sessions           Session[]
  referral          Referral?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  projectSubmissions ProjectSubmission[]
  musicSubmissions   MusicSubmission[]
}

model Referral {
  id           String         @id @default(uuid())
  user         User           @relation(fields: [userId], references: [userId])
  userId       String         @unique
  source       ReferralSource
  customSource String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum ReferralSource {
  FRIEND
  COLLEAGUE
  GREEN_LINE_RECORDS
  SOCIAL_MEDIA
  OTHER
}

model Session {
  sessionId String   @id @default(uuid()) @map("id")
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model EmailVerificationCode {
  email          String   @id
  code           String
  emailConfirmed Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  expiresAt      DateTime
}

model PasswordResetReq {
  passwordResetId String   @id @default(cuid())
  user            User     @relation(fields: [passwordResetId], references: [userId], onDelete: Cascade)
  createdAt       DateTime @default(now())
  expiresAt       DateTime
}

model MusicianGroup {
  groupId          String                @id @default(uuid())
  organizerId      String // The user that created the group
  organizer        User                  @relation(fields: [organizerId], references: [userId], onDelete: Cascade)
  name             String
  groupMembers     MusicianGroupMember[] // Does not contain the user that created the group
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  musicSubmissions MusicSubmission[]
}

model MusicianGroupMember {
  id                String            @id @default(uuid()) @map("id")
  groupId           String
  group             MusicianGroup     @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  firstName         String
  lastName          String
  stageName         String?
  email             String
  isSongWriter      Boolean           @default(false)
  isAscapAffiliated Boolean           @default(false)
  isBmiAffiliated   Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  musicSubmissions  MusicSubmission[] @relation("songWriters")

  @@unique([groupId, email])
}

model ProjectSubmission {
  projectId      String            @id @default(uuid())
  projectOwner   User              @relation(fields: [projectId], references: [userId], onDelete: Cascade)
  description    String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  scenes         SceneSubmission[]
  deadline       DateTime
  videoLink      String            @default("")
  additionalInfo String            @default("")
}

model SceneSubmission {
  sceneId           String            @id @default(uuid())
  description       String
  musicType         String
  similarSongs      String            @default("")
  additionalInfo    String            @default("")
  projectId         String
  projectSubmission ProjectSubmission @relation(fields: [projectId], references: [projectId], onDelete: NoAction)
}

model MusicSubmission {
  musicId        String                @id @default(uuid())
  songName       String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  artist         User                  @relation(fields: [artistId], references: [userId], onDelete: Cascade)
  artistId       String
  songLink       String
  genre          String
  group          MusicianGroup         @relation(fields: [groupId], references: [groupId])
  groupId        String
  songwriters    MusicianGroupMember[] @relation("songWriters")
  additionalInfo String                @default("")
}
