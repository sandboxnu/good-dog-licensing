// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRISMA_URL")
}

enum Role {
  ONBOARDING
  MUSICIAN
  MEDIA_MAKER
  ADMIN
}

model User {
  userId            String            @id @default(uuid()) @map("id")
  email             String            @unique
  hashedPassword    String            @map("password")
  firstName         String
  lastName          String
  stageName         String?
  role              Role
  isSongWriter      Boolean           @default(false)
  isAscapAffiliated Boolean           @default(false)
  isBmiAffiliated   Boolean           @default(false)
  musicianGroups    MusicianGroup[]
  passwordResetReq  PasswordResetReq?
  sessions          Session[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Session {
  sessionId String   @id @default(uuid()) @map("id")
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model EmailVerificationCode {
  email          String   @id
  code           String
  emailConfirmed Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  expiresAt      DateTime
}

model PasswordResetReq {
  passwordResetId String   @id @default(cuid())
  user            User     @relation(fields: [passwordResetId], references: [userId], onDelete: Cascade)
  createdAt       DateTime @default(now())
  expiresAt       DateTime
}

model MusicianGroup {
  groupId      String                @id @default(uuid())
  organizerId       String // The user that created the group
  organizer         User                  @relation(fields: [organizerId], references: [userId], onDelete: Cascade)
  name         String
  groupMembers MusicianGroupMember[] // Does not contain the user that created the group
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model MusicianGroupMember {
  groupId           String
  group             MusicianGroup @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  firstName         String
  lastName          String
  stageName         String?
  email             String
  role              Role
  isSongWriter      Boolean       @default(false)
  isAscapAffiliated Boolean       @default(false)
  isBmiAffiliated   Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@unique([groupId, email])
}
