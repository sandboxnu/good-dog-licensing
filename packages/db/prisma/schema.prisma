// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRISMA_URL")
}

enum Role {
  MUSICIAN
  MEDIA_MAKER
  ADMIN
}

model User {
  userId         String        @id @default(uuid()) @map("id")
  email          String        @unique
  firstName      String
  lastName       String
  hashedPassword String        @map("password")
  role           Role
  groups         Group[]
  sessions       Session[]
  sentInvites    GroupInvite[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Session {
  sessionId String   @id @default(uuid()) @map("id")
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Group {
  groupId   String        @id @default(uuid())
  name      String
  users     User[]
  invites   GroupInvite[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model GroupInvite {
  inviteId     String   @default(cuid()) @map("id")
  groupId      String
  intitiatorId String
  email        String
  firstName    String
  lastName     String
  group        Group    @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  intitiator   User     @relation(fields: [intitiatorId], references: [userId], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@unique([groupId, email])
}
